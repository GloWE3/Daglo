// Code generated by mockery. DO NOT EDIT.

package gasprice

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pool "github.com/0xPolygonHermez/zkevm-node/pool"

	time "time"
)

// poolMock is an autogenerated mock type for the poolInterface type
type poolMock struct {
	mock.Mock
}

type poolMock_Expecter struct {
	mock *mock.Mock
}

func (_m *poolMock) EXPECT() *poolMock_Expecter {
	return &poolMock_Expecter{mock: &_m.Mock}
}

// DeleteGasPricesHistoryOlderThan provides a mock function with given fields: ctx, date
func (_m *poolMock) DeleteGasPricesHistoryOlderThan(ctx context.Context, date time.Time) error {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGasPricesHistoryOlderThan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// poolMock_DeleteGasPricesHistoryOlderThan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGasPricesHistoryOlderThan'
type poolMock_DeleteGasPricesHistoryOlderThan_Call struct {
	*mock.Call
}

// DeleteGasPricesHistoryOlderThan is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *poolMock_Expecter) DeleteGasPricesHistoryOlderThan(ctx interface{}, date interface{}) *poolMock_DeleteGasPricesHistoryOlderThan_Call {
	return &poolMock_DeleteGasPricesHistoryOlderThan_Call{Call: _e.mock.On("DeleteGasPricesHistoryOlderThan", ctx, date)}
}

func (_c *poolMock_DeleteGasPricesHistoryOlderThan_Call) Run(run func(ctx context.Context, date time.Time)) *poolMock_DeleteGasPricesHistoryOlderThan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *poolMock_DeleteGasPricesHistoryOlderThan_Call) Return(_a0 error) *poolMock_DeleteGasPricesHistoryOlderThan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *poolMock_DeleteGasPricesHistoryOlderThan_Call) RunAndReturn(run func(context.Context, time.Time) error) *poolMock_DeleteGasPricesHistoryOlderThan_Call {
	_c.Call.Return(run)
	return _c
}

// GetGasPrices provides a mock function with given fields: ctx
func (_m *poolMock) GetGasPrices(ctx context.Context) (pool.GasPrices, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGasPrices")
	}

	var r0 pool.GasPrices
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pool.GasPrices, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pool.GasPrices); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pool.GasPrices)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// poolMock_GetGasPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasPrices'
type poolMock_GetGasPrices_Call struct {
	*mock.Call
}

// GetGasPrices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *poolMock_Expecter) GetGasPrices(ctx interface{}) *poolMock_GetGasPrices_Call {
	return &poolMock_GetGasPrices_Call{Call: _e.mock.On("GetGasPrices", ctx)}
}

func (_c *poolMock_GetGasPrices_Call) Run(run func(ctx context.Context)) *poolMock_GetGasPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *poolMock_GetGasPrices_Call) Return(_a0 pool.GasPrices, _a1 error) *poolMock_GetGasPrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *poolMock_GetGasPrices_Call) RunAndReturn(run func(context.Context) (pool.GasPrices, error)) *poolMock_GetGasPrices_Call {
	_c.Call.Return(run)
	return _c
}

// SetGasPrices provides a mock function with given fields: ctx, l2GasPrice, l1GasPrice
func (_m *poolMock) SetGasPrices(ctx context.Context, l2GasPrice uint64, l1GasPrice uint64) error {
	ret := _m.Called(ctx, l2GasPrice, l1GasPrice)

	if len(ret) == 0 {
		panic("no return value specified for SetGasPrices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) error); ok {
		r0 = rf(ctx, l2GasPrice, l1GasPrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// poolMock_SetGasPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGasPrices'
type poolMock_SetGasPrices_Call struct {
	*mock.Call
}

// SetGasPrices is a helper method to define mock.On call
//   - ctx context.Context
//   - l2GasPrice uint64
//   - l1GasPrice uint64
func (_e *poolMock_Expecter) SetGasPrices(ctx interface{}, l2GasPrice interface{}, l1GasPrice interface{}) *poolMock_SetGasPrices_Call {
	return &poolMock_SetGasPrices_Call{Call: _e.mock.On("SetGasPrices", ctx, l2GasPrice, l1GasPrice)}
}

func (_c *poolMock_SetGasPrices_Call) Run(run func(ctx context.Context, l2GasPrice uint64, l1GasPrice uint64)) *poolMock_SetGasPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *poolMock_SetGasPrices_Call) Return(_a0 error) *poolMock_SetGasPrices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *poolMock_SetGasPrices_Call) RunAndReturn(run func(context.Context, uint64, uint64) error) *poolMock_SetGasPrices_Call {
	_c.Call.Return(run)
	return _c
}

// newPoolMock creates a new instance of poolMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newPoolMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *poolMock {
	mock := &poolMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
