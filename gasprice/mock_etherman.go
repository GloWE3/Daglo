// Code generated by mockery. DO NOT EDIT.

package gasprice

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"
)

// ethermanMock is an autogenerated mock type for the ethermanInterface type
type ethermanMock struct {
	mock.Mock
}

type ethermanMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ethermanMock) EXPECT() *ethermanMock_Expecter {
	return &ethermanMock_Expecter{mock: &_m.Mock}
}

// GetL1GasPrice provides a mock function with given fields: ctx
func (_m *ethermanMock) GetL1GasPrice(ctx context.Context) *big.Int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetL1GasPrice")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ethermanMock_GetL1GasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1GasPrice'
type ethermanMock_GetL1GasPrice_Call struct {
	*mock.Call
}

// GetL1GasPrice is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ethermanMock_Expecter) GetL1GasPrice(ctx interface{}) *ethermanMock_GetL1GasPrice_Call {
	return &ethermanMock_GetL1GasPrice_Call{Call: _e.mock.On("GetL1GasPrice", ctx)}
}

func (_c *ethermanMock_GetL1GasPrice_Call) Run(run func(ctx context.Context)) *ethermanMock_GetL1GasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ethermanMock_GetL1GasPrice_Call) Return(_a0 *big.Int) *ethermanMock_GetL1GasPrice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ethermanMock_GetL1GasPrice_Call) RunAndReturn(run func(context.Context) *big.Int) *ethermanMock_GetL1GasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// newEthermanMock creates a new instance of ethermanMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newEthermanMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ethermanMock {
	mock := &ethermanMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
