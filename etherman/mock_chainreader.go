// Code generated by mockery. DO NOT EDIT.

package etherman

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ChainReaderMock is an autogenerated mock type for the ChainReader type
type ChainReaderMock struct {
	mock.Mock
}

type ChainReaderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ChainReaderMock) EXPECT() *ChainReaderMock_Expecter {
	return &ChainReaderMock_Expecter{mock: &_m.Mock}
}

// BlockByHash provides a mock function with given fields: ctx, hash
func (_m *ChainReaderMock) BlockByHash(ctx context.Context, hash common.Hash) (*types.Block, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for BlockByHash")
	}

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Block, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainReaderMock_BlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockByHash'
type ChainReaderMock_BlockByHash_Call struct {
	*mock.Call
}

// BlockByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *ChainReaderMock_Expecter) BlockByHash(ctx interface{}, hash interface{}) *ChainReaderMock_BlockByHash_Call {
	return &ChainReaderMock_BlockByHash_Call{Call: _e.mock.On("BlockByHash", ctx, hash)}
}

func (_c *ChainReaderMock_BlockByHash_Call) Run(run func(ctx context.Context, hash common.Hash)) *ChainReaderMock_BlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *ChainReaderMock_BlockByHash_Call) Return(_a0 *types.Block, _a1 error) *ChainReaderMock_BlockByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainReaderMock_BlockByHash_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Block, error)) *ChainReaderMock_BlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// BlockByNumber provides a mock function with given fields: ctx, number
func (_m *ChainReaderMock) BlockByNumber(ctx context.Context, number *big.Int) (*types.Block, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for BlockByNumber")
	}

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (*types.Block, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Block); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainReaderMock_BlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockByNumber'
type ChainReaderMock_BlockByNumber_Call struct {
	*mock.Call
}

// BlockByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number *big.Int
func (_e *ChainReaderMock_Expecter) BlockByNumber(ctx interface{}, number interface{}) *ChainReaderMock_BlockByNumber_Call {
	return &ChainReaderMock_BlockByNumber_Call{Call: _e.mock.On("BlockByNumber", ctx, number)}
}

func (_c *ChainReaderMock_BlockByNumber_Call) Run(run func(ctx context.Context, number *big.Int)) *ChainReaderMock_BlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *ChainReaderMock_BlockByNumber_Call) Return(_a0 *types.Block, _a1 error) *ChainReaderMock_BlockByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainReaderMock_BlockByNumber_Call) RunAndReturn(run func(context.Context, *big.Int) (*types.Block, error)) *ChainReaderMock_BlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByHash provides a mock function with given fields: ctx, hash
func (_m *ChainReaderMock) HeaderByHash(ctx context.Context, hash common.Hash) (*types.Header, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByHash")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Header, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Header); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainReaderMock_HeaderByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByHash'
type ChainReaderMock_HeaderByHash_Call struct {
	*mock.Call
}

// HeaderByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *ChainReaderMock_Expecter) HeaderByHash(ctx interface{}, hash interface{}) *ChainReaderMock_HeaderByHash_Call {
	return &ChainReaderMock_HeaderByHash_Call{Call: _e.mock.On("HeaderByHash", ctx, hash)}
}

func (_c *ChainReaderMock_HeaderByHash_Call) Run(run func(ctx context.Context, hash common.Hash)) *ChainReaderMock_HeaderByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *ChainReaderMock_HeaderByHash_Call) Return(_a0 *types.Header, _a1 error) *ChainReaderMock_HeaderByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainReaderMock_HeaderByHash_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Header, error)) *ChainReaderMock_HeaderByHash_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByNumber provides a mock function with given fields: ctx, number
func (_m *ChainReaderMock) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByNumber")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (*types.Header, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Header); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainReaderMock_HeaderByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByNumber'
type ChainReaderMock_HeaderByNumber_Call struct {
	*mock.Call
}

// HeaderByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number *big.Int
func (_e *ChainReaderMock_Expecter) HeaderByNumber(ctx interface{}, number interface{}) *ChainReaderMock_HeaderByNumber_Call {
	return &ChainReaderMock_HeaderByNumber_Call{Call: _e.mock.On("HeaderByNumber", ctx, number)}
}

func (_c *ChainReaderMock_HeaderByNumber_Call) Run(run func(ctx context.Context, number *big.Int)) *ChainReaderMock_HeaderByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *ChainReaderMock_HeaderByNumber_Call) Return(_a0 *types.Header, _a1 error) *ChainReaderMock_HeaderByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainReaderMock_HeaderByNumber_Call) RunAndReturn(run func(context.Context, *big.Int) (*types.Header, error)) *ChainReaderMock_HeaderByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeNewHead provides a mock function with given fields: ctx, ch
func (_m *ChainReaderMock) SubscribeNewHead(ctx context.Context, ch chan<- *types.Header) (ethereum.Subscription, error) {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeNewHead")
	}

	var r0 ethereum.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *types.Header) (ethereum.Subscription, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *types.Header) ethereum.Subscription); ok {
		r0 = rf(ctx, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethereum.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, chan<- *types.Header) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainReaderMock_SubscribeNewHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeNewHead'
type ChainReaderMock_SubscribeNewHead_Call struct {
	*mock.Call
}

// SubscribeNewHead is a helper method to define mock.On call
//   - ctx context.Context
//   - ch chan<- *types.Header
func (_e *ChainReaderMock_Expecter) SubscribeNewHead(ctx interface{}, ch interface{}) *ChainReaderMock_SubscribeNewHead_Call {
	return &ChainReaderMock_SubscribeNewHead_Call{Call: _e.mock.On("SubscribeNewHead", ctx, ch)}
}

func (_c *ChainReaderMock_SubscribeNewHead_Call) Run(run func(ctx context.Context, ch chan<- *types.Header)) *ChainReaderMock_SubscribeNewHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- *types.Header))
	})
	return _c
}

func (_c *ChainReaderMock_SubscribeNewHead_Call) Return(_a0 ethereum.Subscription, _a1 error) *ChainReaderMock_SubscribeNewHead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainReaderMock_SubscribeNewHead_Call) RunAndReturn(run func(context.Context, chan<- *types.Header) (ethereum.Subscription, error)) *ChainReaderMock_SubscribeNewHead_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionCount provides a mock function with given fields: ctx, blockHash
func (_m *ChainReaderMock) TransactionCount(ctx context.Context, blockHash common.Hash) (uint, error) {
	ret := _m.Called(ctx, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for TransactionCount")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (uint, error)); ok {
		return rf(ctx, blockHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) uint); ok {
		r0 = rf(ctx, blockHash)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainReaderMock_TransactionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionCount'
type ChainReaderMock_TransactionCount_Call struct {
	*mock.Call
}

// TransactionCount is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHash common.Hash
func (_e *ChainReaderMock_Expecter) TransactionCount(ctx interface{}, blockHash interface{}) *ChainReaderMock_TransactionCount_Call {
	return &ChainReaderMock_TransactionCount_Call{Call: _e.mock.On("TransactionCount", ctx, blockHash)}
}

func (_c *ChainReaderMock_TransactionCount_Call) Run(run func(ctx context.Context, blockHash common.Hash)) *ChainReaderMock_TransactionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *ChainReaderMock_TransactionCount_Call) Return(_a0 uint, _a1 error) *ChainReaderMock_TransactionCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainReaderMock_TransactionCount_Call) RunAndReturn(run func(context.Context, common.Hash) (uint, error)) *ChainReaderMock_TransactionCount_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionInBlock provides a mock function with given fields: ctx, blockHash, index
func (_m *ChainReaderMock) TransactionInBlock(ctx context.Context, blockHash common.Hash, index uint) (*types.Transaction, error) {
	ret := _m.Called(ctx, blockHash, index)

	if len(ret) == 0 {
		panic("no return value specified for TransactionInBlock")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, uint) (*types.Transaction, error)); ok {
		return rf(ctx, blockHash, index)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, uint) *types.Transaction); ok {
		r0 = rf(ctx, blockHash, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash, uint) error); ok {
		r1 = rf(ctx, blockHash, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainReaderMock_TransactionInBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionInBlock'
type ChainReaderMock_TransactionInBlock_Call struct {
	*mock.Call
}

// TransactionInBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHash common.Hash
//   - index uint
func (_e *ChainReaderMock_Expecter) TransactionInBlock(ctx interface{}, blockHash interface{}, index interface{}) *ChainReaderMock_TransactionInBlock_Call {
	return &ChainReaderMock_TransactionInBlock_Call{Call: _e.mock.On("TransactionInBlock", ctx, blockHash, index)}
}

func (_c *ChainReaderMock_TransactionInBlock_Call) Run(run func(ctx context.Context, blockHash common.Hash, index uint)) *ChainReaderMock_TransactionInBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash), args[2].(uint))
	})
	return _c
}

func (_c *ChainReaderMock_TransactionInBlock_Call) Return(_a0 *types.Transaction, _a1 error) *ChainReaderMock_TransactionInBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainReaderMock_TransactionInBlock_Call) RunAndReturn(run func(context.Context, common.Hash, uint) (*types.Transaction, error)) *ChainReaderMock_TransactionInBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewChainReaderMock creates a new instance of ChainReaderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainReaderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainReaderMock {
	mock := &ChainReaderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
