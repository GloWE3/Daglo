// Code generated by mockery. DO NOT EDIT.

package mockseth

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	etherman "github.com/0xPolygonHermez/zkevm-node/etherman"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// GenericEventProcessor is an autogenerated mock type for the GenericEventProcessor type
type GenericEventProcessor struct {
	mock.Mock
}

type GenericEventProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *GenericEventProcessor) EXPECT() *GenericEventProcessor_Expecter {
	return &GenericEventProcessor_Expecter{mock: &_m.Mock}
}

// AddEventDataToBlock provides a mock function with given fields: ctx, vLog, block, callData
func (_m *GenericEventProcessor) AddEventDataToBlock(ctx context.Context, vLog types.Log, block *etherman.Block, callData *etherman.CallData) (*etherman.Order, error) {
	ret := _m.Called(ctx, vLog, block, callData)

	if len(ret) == 0 {
		panic("no return value specified for AddEventDataToBlock")
	}

	var r0 *etherman.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Log, *etherman.Block, *etherman.CallData) (*etherman.Order, error)); ok {
		return rf(ctx, vLog, block, callData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Log, *etherman.Block, *etherman.CallData) *etherman.Order); ok {
		r0 = rf(ctx, vLog, block, callData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*etherman.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Log, *etherman.Block, *etherman.CallData) error); ok {
		r1 = rf(ctx, vLog, block, callData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenericEventProcessor_AddEventDataToBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventDataToBlock'
type GenericEventProcessor_AddEventDataToBlock_Call struct {
	*mock.Call
}

// AddEventDataToBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - vLog types.Log
//   - block *etherman.Block
//   - callData *etherman.CallData
func (_e *GenericEventProcessor_Expecter) AddEventDataToBlock(ctx interface{}, vLog interface{}, block interface{}, callData interface{}) *GenericEventProcessor_AddEventDataToBlock_Call {
	return &GenericEventProcessor_AddEventDataToBlock_Call{Call: _e.mock.On("AddEventDataToBlock", ctx, vLog, block, callData)}
}

func (_c *GenericEventProcessor_AddEventDataToBlock_Call) Run(run func(ctx context.Context, vLog types.Log, block *etherman.Block, callData *etherman.CallData)) *GenericEventProcessor_AddEventDataToBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Log), args[2].(*etherman.Block), args[3].(*etherman.CallData))
	})
	return _c
}

func (_c *GenericEventProcessor_AddEventDataToBlock_Call) Return(_a0 *etherman.Order, _a1 error) *GenericEventProcessor_AddEventDataToBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GenericEventProcessor_AddEventDataToBlock_Call) RunAndReturn(run func(context.Context, types.Log, *etherman.Block, *etherman.CallData) (*etherman.Order, error)) *GenericEventProcessor_AddEventDataToBlock_Call {
	_c.Call.Return(run)
	return _c
}

// EventSignature provides a mock function with given fields:
func (_m *GenericEventProcessor) EventSignature() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventSignature")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// GenericEventProcessor_EventSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventSignature'
type GenericEventProcessor_EventSignature_Call struct {
	*mock.Call
}

// EventSignature is a helper method to define mock.On call
func (_e *GenericEventProcessor_Expecter) EventSignature() *GenericEventProcessor_EventSignature_Call {
	return &GenericEventProcessor_EventSignature_Call{Call: _e.mock.On("EventSignature")}
}

func (_c *GenericEventProcessor_EventSignature_Call) Run(run func()) *GenericEventProcessor_EventSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericEventProcessor_EventSignature_Call) Return(_a0 common.Hash) *GenericEventProcessor_EventSignature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericEventProcessor_EventSignature_Call) RunAndReturn(run func() common.Hash) *GenericEventProcessor_EventSignature_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenericEventProcessor creates a new instance of GenericEventProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericEventProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericEventProcessor {
	mock := &GenericEventProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
